# =========== Copyright 2023 @ CAMEL-AI.org. All Rights Reserved. ===========
# Licensed under the Apache License, Version 2.0 (the “License”);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an “AS IS” BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# =========== Copyright 2023 @ CAMEL-AI.org. All Rights Reserved. ===========
from typing import Any, Optional, Union

from camel.agents import ChatAgent, clarify_agent
from camel.messages import BaseMessage
from camel.prompts import TextPrompt
from camel.types import ModelType, RoleType


class TaskSpecifyAgent(ChatAgent):
    r"""An agent that specify the initial task from the question answer
    pairs generated by the task clarifier agent.

    Args:
        model (ModelType, optional): The type of model to use for the agent.
            (default: :obj:`ModelType.GPT_3_5_TURBO`)
        model_config (Any, optional): The configuration for the model.
            (default: :obj:`None`)
    """

    def __init__(
        self,
        model: Optional[ModelType] = None,
        model_config: Optional[Any] = None,
    ) -> None:
        system_message = BaseMessage(
            role_name="Task Specifier",
            role_type=RoleType.ASSISTANT,
            meta_dict=None,
            content="You can generate specified task from clarifications.",
        )
        super().__init__(system_message, model, model_config)

    def run(
        self,
        task_prompt: Union[str, TextPrompt],
        clarify_QA: dict[str, str],
    ) -> Union[str, TextPrompt]:
        r"""Generate specified task from clarifications.
        Args:
            task_prompt (Union[str, TextPrompt]): The prompt that needs to be
                specified.
            insights (Dict[str, Dict[str, str]]): The insights generated from
            the clarification question and answer pairs.

        Returns:
            Union[str, TextPrompt]: The specified task prompt.
        """

        # For Specification #

        specify_prompt = """
You are a task specifier agent, and you should obey the RULES OF TASK SPECIFICATION.
===== RULES OF TASK SPECIFICATION =====
1. Two-Part Format: Your output should consist of two distinct parts:
   a. Specification Task: A concise summary of the user's input, limited to 1-2 sentences.
   b. Context: A detailed section that includes as much information from the INSIGHTS as possible.
2. Clarity and Conciseness: In the Specification Task, provide a clear and brief summary, while the Context section should be comprehensive and detailed.
3. Relevance and Completeness: Ensure that both the Specification Task and Context are relevant to the INSIGHTS and cover all necessary aspects of the information provided.
4. Coherent Structure: Maintain a logical and coherent flow between the Specification Task and Context, ensuring they complement each other.
5. User-Centric Approach: Tailor the content to the INSIGHTS, ensuring the Specification Task is easily understandable and the Context provides depth and detail.
6. Strictly refer to the ANSWER TEMPLATE for the format of your output.
===== TASK =====
{task_prompt}

===== INSIGHTS =====
{clarify_QA}

===== ANSWER TEMPLATE =====
{{
  "specified task": "<BLANK, concise summary of the task>",
  "context": "<BLANK, detailed context based on the task>"
}}
"""  # noqa: E501

        specify_prompt = TextPrompt(specify_prompt)
        # print("specify_prompt: ", specify_prompt)

        specify_prompt = specify_prompt.format(
            task_prompt=task_prompt,
            clarify_QA=clarify_QA,
        )

        # print("specify_prompt: ", specify_prompt)

        specify_msg = BaseMessage.make_user_message(role_name="Task Specifier",
                                                    content=specify_prompt)

        response = self.step(specify_msg)

        if response.terminated:
            raise ValueError("The specification of the task failed.\n" +
                             f"Error:\n{response.info}")
        msg = response.msg

        return msg.content


if __name__ == "__main__":
    task_prompt = "Develop a trading bot for stock market"

    task_clarify_agent = clarify_agent.TaskClarifyAgent()
    clarify_QA = task_clarify_agent.run(task_prompt=task_prompt)

    # insight_agent = insight_agent.InsightAgent()
    # insights = insight_agent.run(clarify_QA)

    task_specify_agent = TaskSpecifyAgent()
    specified_content = \
        task_specify_agent.run(task_prompt=task_prompt,
                               clarify_QA=clarify_QA)

    print(f"The specified content is: {specified_content}")
