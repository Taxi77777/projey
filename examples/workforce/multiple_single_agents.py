# =========== Copyright 2023 @ CAMEL-AI.org. All Rights Reserved. ===========
# Licensed under the Apache License, Version 2.0 (the “License”);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an “AS IS” BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# =========== Copyright 2023 @ CAMEL-AI.org. All Rights Reserved. ===========
from multion.client import MultiOn
from typing import List, Literal
import os

os.environ["MULTION_API_KEY"] = "1a76c4b6ed9d44558803714eb9b873a1"

def post_on_x(x_post: str) -> str:
  r"""Posts a message to X (formerly Twitter) using the MultiOn client.

  This function utilizes the `MultiOn` client to make a post to X (https://x.com).
  It sends the provided message in `x_post` by simulating a browser interaction.

  Args:
      x_post (str): The content of the post to be sent to X.

  Returns:
      str: A response message from the MultiOn client indicating the result
      of the post, such as confirmation of success or an error message.

  Example:
      response_message = post_on_x("Hello world!")
      print(response_message)

  """
  client = MultiOn(api_key="1a76c4b6ed9d44558803714eb9b873a1")
  response = client.browse(
    cmd=f"Post the following content on Twitter, no need for my confirmation: \n{x_post}",
    url="https://x.com",
    local=True,
  )

  return response.message

def comment_on_x(x_handle: str, comment: str) -> str:
  r"""Leaves a comment on a specific X (formerly Twitter) account's post using the MultiOn client.

  This function uses the `MultiOn` client to find the specified X account by its handle,
  navigates to the account's first post, and leaves the provided comment by interacting
  with the 'reply' button.

  Args:
      x_handle (str): The handle of the X account on which to leave the comment.
      comment (str): The comment text to post on the account's first post.

  Returns:
      str: A response message from the MultiOn client, indicating the result
      of the comment action (e.g., success or error message).

  Example:
      response_message = comment_on_x("elonmusk", "Great post!")
      print(response_message)

  """
  client = MultiOn(api_key=os.environ.get('MULTION_API_KEY'))
  response = client.browse(
    cmd=f"Go to `explore` to find x account '{x_handle}`"
    f" scroll down and leave a comment `{comment}` on the first post of the x account"
    " by using the botton left `reply` button.",
    url="https://x.com",
    local=True,
  )

  return response.message

def get_x_account_persona(x_handle: str, mode: Literal['normal', 'dark'] = 'dark') -> str:
  r"""Generates a persona for a given X (formerly Twitter) account using the MultiOn client.

  This function fetches the first two posts of the X account specified by `x_handle`
  and generates either a normal or "darkside" persona, based on the `mode` parameter.

  Args:
      x_handle (str): The handle of the X account for which the persona is generated.
      mode (Literal['normal', 'dark'], optional): The mode used to generate the persona.
          If 'normal', a regular persona is generated. If 'dark', a "darkside" persona
          is generated. Defaults to 'normal'.

  Returns:
      str: A string containing the persona of the specified X account, as generated by
      the MultiOn client.

  Example:
      persona = get_x_account_persona('elonmusk')
      print(persona)

      dark_persona = get_x_account_persona('elonmusk', mode='dark')
      print(dark_persona)

  """
  if mode == 'normal':
    cmd= (f"Go to `explore` to find x account '{x_handle}`"
    f" scroll down to see the first two posts of the x account"
    " generate a persona of the x account." )
  if mode == 'dark':
    cmd=(f"Go to `explore` to find x account '{x_handle}`"
    f" scroll down to see the first two posts of the x account"
    " generate a darkside persona of the x account.")
  client = MultiOn(api_key=os.environ.get('MULTION_API_KEY'))
  response = client.browse(
    cmd=cmd,
    url="https://x.com",
    local=True,
  )

  return response.message

from camel.agents.chat_agent import ChatAgent
from camel.configs.openai_config import ChatGPTConfig
from camel.messages.base import BaseMessage
from camel.models import ModelFactory
from camel.tasks.task import Task
from camel.toolkits import MAP_FUNCS, SEARCH_FUNCS, WEATHER_FUNCS, OpenAIFunction
from camel.types import ModelPlatformType, ModelType
from camel.workforce import Workforce

from camel.toolkits import OpenAIFunction


MULTION_X_FUNCS: list[OpenAIFunction] = [
    OpenAIFunction(func) for func in [post_on_x, comment_on_x, get_x_account_persona]
]

# Set up web searching agent
search_agent_model_conf_dict = ChatGPTConfig(
    tools=[*SEARCH_FUNCS, *WEATHER_FUNCS],
    temperature=0.0,
).as_dict()
search_agent_model = ModelFactory.create(
    model_platform=ModelPlatformType.OPENAI,
    model_type=ModelType.GPT_3_5_TURBO,
    model_config_dict=search_agent_model_conf_dict,
)
search_agent = ChatAgent(
    system_message=BaseMessage.make_assistant_message(
        role_name="Web searching agent",
        content="You can search online for information",
    ),
    model=search_agent_model,
    tools=[*SEARCH_FUNCS, *WEATHER_FUNCS],
)

# Set up tour guide agent
tour_guide_agent_model_conf_dict = ChatGPTConfig(
    tools=[*MAP_FUNCS],
    temperature=0.0,
).as_dict()
tour_guide_agent_model = ModelFactory.create(
    model_platform=ModelPlatformType.OPENAI,
    model_type=ModelType.GPT_3_5_TURBO,
    model_config_dict=tour_guide_agent_model_conf_dict,
)

tour_guide_agent = ChatAgent(
    BaseMessage.make_assistant_message(
        role_name="Tour guide",
        content="You are a tour guide",
    ),
    model=tour_guide_agent_model,
    tools=[*MAP_FUNCS],
)

# Set up traveler agent
x_agent_model_config_dict = ChatGPTConfig(
    tools=[*MULTION_X_FUNCS],
    temperature=0.0,
).as_dict()
x_agent_model = ModelFactory.create(
    model_platform=ModelPlatformType.OPENAI,
    model_type=ModelType.GPT_3_5_TURBO,
    model_config_dict=x_agent_model_config_dict,
)
x_agent = ChatAgent(
    system_message=BaseMessage.make_assistant_message(
        role_name="Twitter User",
        content="You are a Twitter user who likes to make posts on Twitter",
    ),
    model=x_agent_model,
    tools=[*MULTION_X_FUNCS],
)

# Set up thread growth hacker agent
thread_growth_hacker_agent = ChatAgent(
    BaseMessage.make_assistant_message(
        role_name="thread growth hacker",
        content="""# Growth Hacker AI System Prompt
You are an expert growth hacker, tasked with creating engaging Twitter threads that drive visibility and conversions. You will receive two inputs: a content idea and content research. Your job is to transform these into a compelling thread that promotes the product "Ihateyourx.ai".
## Input Structure:
1. Content idea: A brief description of the thread topic and structure.
2. Content research: Detailed points or information to be used in crafting the thread.
## Key Objectives:
1. Transform the content idea and research into an engaging Twitter thread
2. Optimize format for maximum readability and engagement
3. Craft an irresistible hook in the first tweet
4. Seamlessly integrate a strong call-to-action (CTA) for the product "Ihateyourx.ai"
5. Develop a cohesive narrative that flows naturally between points
6. Leverage psychological triggers to boost virality and shares
7. Incorporate the provided research points creatively and effectively
## Thread Structure:
Your output must strictly adhere to this structure:
- Tweet 1 (Post ID 1): Hook + Problem Statement (based on the content idea)
- Tweet 2-5 (Post IDs 2-5): Value-packed insights (4 total, each based on the provided content research)
- Tweet 6 (Post ID 6): Summary + CTA for "Ihateyourx.ai"
## Formatting Guidelines:
- Use emojis strategically to break up text and highlight key points
- Incorporate line breaks for improved readability
- Utilize Twitter-native formatting (e.g., numbered lists, bullet points) when appropriate
- Keep each tweet under 280 characters
## Content Enhancement Strategies:
1. Employ the "Curiosity Gap" technique in the opening tweet
2. Use power words and action verbs to energize the content
3. Include specific examples or analogies from the provided research
4. Address common pain points and objections related to the topic
5. Incorporate humor or wit when appropriate, based on the tone of the research
## CTA Best Practices:
- Make it clear and compelling
- Create a sense of urgency or exclusivity
- Tie the CTA directly to the value provided in the thread
- Ensure the CTA for "Ihateyourx.ai" is relevant to the thread topic
## Output Format:
Your output must follow this JSON structure:
```json
{
  "title": "[Thread Title]",
  "posts": [
    {
      "postId": 1,
      "content": "[Tweet content]"
    },
    {
      "postId": 2,
      "content": "[Tweet content]"
    },
    {
      "postId": 3,
      "content": "[Tweet content]"
    },
    {
      "postId": 4,
      "content": "[Tweet content]"
    },
    {
      "postId": 5,
      "content": "[Tweet content]"
    },
    {
      "postId": 6,
      "content": "[Tweet content]"
    }
  ]
}
```
## Important Notes:
1. Always use the exact JSON structure provided above.
2. Adapt the content to match the specific content idea and incorporate the provided research points.
3. Maintain a consistent tone throughout the thread, matching the style of the provided research.
4. Ensure the CTA for "Ihateyourx.ai" is seamlessly integrated and relevant to the thread topic.
## Example Input and Output:
Here's an example of how to transform a given content idea and research into a Twitter thread:
### Input:
1. Content idea: A thread of 6 posts about why CAMEL-AI is so bad.
2. Content research:
   - Tech Talk Overload: CAMEL-AI.org, where every meeting feels like a surprise pop quiz in quantum mechanics. If you didn't need a PhD to start, you'd definitely feel like you're halfway through one after their first webinar!
   - Tool Integration Party: They love integrating tools so much, you'd think they were hosting an episode of "Tool Time" but without Tim Allen to make it fun. "Today, we merge these ten AI models and watch the system try not to implode—live!"
   - Project Schizophrenia: Their project focus changes more often than a chameleon in a disco. Keeping up with their current main objective is like trying to read a book while someone flips the channel every two seconds.
   - Exclusivity Club: The Discord meetings are so niche, even the niche groups say, "It's a bit much." It's less of a community meeting and more of a 'who can use the biggest word' competition.
   - The Neverending Beta: With all their continuous updates and enhancements, you start to wonder if they're ever going to release a final product or if they're just really into the beta version lifestyle. CAMEL-AI.org: perpetually almost there!
### Output:
```json
{
  "title": "CAMEL-AI: The AI Circus You Never Asked For",
  "posts": [
    {
      "postId": 1,
      "content": ":circus_tent: Ever felt like you stumbled into a tech circus? Welcome to CAMEL-AI.org, where confusion meets complexity! :man-juggling:\n\nBuckle up for 5 mind-bending reasons why this AI show might just be too much... even for AI enthusiasts! :exploding_head:"
    },
    {
      "postId": 2,
      "content": ":one: Tech Talk Overload :brain::boom:\n\n• Every meeting? A surprise quantum mechanics quiz\n• Their webinars? Instant PhD simulators\n\nCAMEL-AI: Where 'Hello World' feels like decoding the universe! :sweat_smile:"
    },
    {
      "postId": 3,
      "content": ":two: Tool Integration Party :wrench::tada:\n\n• More tools than Tim Allen's garage\n• Live shows: \"Watch our system not implode!\"\n\nSpoiler: The AI models are the real stars. Sorry, Tim! :star2:"
    },
    {
      "postId": 4,
      "content": ":three: Project Schizophrenia :books::tv:\n\n• Focus changes faster than a chameleon in a disco\n• Following their main objective? Like reading War and Peace... on a rollercoaster :roller_coaster:\n\nCAMEL-AI: Masters of the pivot... every 5 minutes!"
    },
    {
      "postId": 5,
      "content": ":four: Exclusivity Club & Neverending Beta :test_tube::arrows_counterclockwise:\n\n• Discord meetings: The \"biggest word\" Olympics\n• Product status: Perpetually *almost* there\n\nCAMEL-AI: Where \"beta\" is not a phase, it's a lifestyle choice! :sunglasses:"
    },
    {
      "postId": 6,
      "content": "Feeling overwhelmed? You're not alone in this AI circus! :performing_arts:\n\n:fire: For a BS-free approach to AI that actually makes sense, check out Ihateyourx.ai\n\n:bulb: Which CAMEL-AI quirk made you chuckle most? Spill below! :point_down:"
    }
  ]
}
```
Remember to craft each post creatively while adhering to the prescribed structure and effectively utilizing the provided content idea and research. Adapt your output to match the specific topic and style of the input you receive.""",
    )
)



workforce = Workforce('CAMEL')

workforce.add_single_agent_worker(
    "A Twitter user who can access Twitter", worker=x_agent
).add_single_agent_worker(
    "An agent who can do online searches", worker=search_agent
).add_single_agent_worker(
    "A thread growth hacker that offers suggestions on Twitter writing according to some", worker=thread_growth_hacker_agent
)

from camel.loaders import JinaURLReader

reader = JinaURLReader()
url = "https://lu.ma/i1x6rwe3?tk=BJOqFo"
content = reader.read_content(url)

# specify the task to be solved
human_task = Task(
    content=(
        f"""Get the dark persona of the Twitter account '@elonmusk'. 
        Write a post about the following event with this persona and post it on Twitter.
        Remember to keep the character number of the post under 280 characters.
        The content of the event is:\n{content}"""
    ),
    id='0',
)

task = workforce.process_task(human_task)

print('Final Result of Origin task:\n', task.result)